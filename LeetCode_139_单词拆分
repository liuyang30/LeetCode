package dynamicProgramming;

import org.junit.Test;
import utils.LeetcodeUtils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;

/**
 * 139. 单词拆分
 *
 * 给定一个非空字符串 s 和一个包含非空单词的列表 wordDict，判定 s 是否可以被空格拆分为一个或多个在字典中出现的单词。
 *
 * 说明：
 *
 *     拆分时可以重复使用字典中的单词。
 *     你可以假设字典中没有重复的单词。
 *
 * 示例 1：
 *
 * 输入: s = "leetcode", wordDict = ["leet", "code"]
 * 输出: true
 * 解释: 返回 true 因为 "leetcode" 可以被拆分成 "leet code"。
 *
 * 示例 2：
 *
 * 输入: s = "applepenapple", wordDict = ["apple", "pen"]
 * 输出: true
 * 解释: 返回 true 因为 "applepenapple" 可以被拆分成 "apple pen apple"。
 *      注意你可以重复使用字典中的单词。
 *
 * 示例 3：
 *
 * 输入: s = "catsandog", wordDict = ["cats", "dog", "sand", "and", "cat"]
 * 输出: false
 */
public class Leetcode_139 {

    @Test
    public void test() {
        /*
        String[] strings = {"cats", "dog", "sand", "and", "cat"};
        ArrayList<String> strings1 = new ArrayList<>();
        strings1.addAll(Arrays.asList(strings));

        System.out.println(wordBreak("carsandog", strings1));
        */

        String[] strings = {"aaaa", "aaa"};
        ArrayList<String> strings1 = new ArrayList<>();
        strings1.addAll(Arrays.asList(strings));

        System.out.println(wordBreak_v2("aaaaaaa", strings1));

    }

    /**
     * 采用从左向右匹配的方式
     * 字典："aaa" "aaaa"
     * s = "aaaaaaa"
     * 这种情况匹配失败
     * 会被拆分成"aaa" "aaa" "a"
     */
    public boolean wordBreak_v1(String s, List<String> wordDict) {

        if (s == null) return false;

        // 构造字典
        HashSet<String> map = new HashSet<>(wordDict);

        int len = s.length();
        if (len == 0) return false;

        int lo = 0;
        int hi = 0;
        while (hi < len) {
            String temp = s.substring(lo, hi + 1);
            System.out.println("lo=" + lo + " hi=" + hi);
            System.out.println(temp);
            if (map.contains(temp)) {

                System.out.println("match!");

                lo = hi + 1;
            }

            System.out.println();
            hi++;
        }

        return (hi == lo);

    }


    public boolean wordBreak_v2(String s, List<String> wordDict) {

        if (s == null) return false;

        // 字符串长度
        int len = s.length();

        if (len == 0) return false;

        // 字典
        HashSet<String> set = new HashSet<>(wordDict);

        // 动态规划数组
        // dp[i] 表示字符串 s[0,i]能否被字典拆分
        boolean[] dp = new boolean[len];

        for (int i = 0; i < len; i++) {
            for (int j = i-1; j >= 0; j--) {
                // 如果 s[0,j]能被字典拆分，同时s[j+1,i]又是一个单词
                // 则dp[i] = true;
                if (dp[j] && set.contains(s.substring(j + 1, i + 1))) {
                    dp[i] = true;
                    break;
                }
            }
            // 处理 [0,i] 是一个单词的情况
            // 因为不存在 dp[-1]
            if( set.contains(s.substring( 0 , i + 1)) ) dp[i] = true;
        }

        //LeetcodeUtils.printArray(dp);

        return dp[len - 1];
    }
}
