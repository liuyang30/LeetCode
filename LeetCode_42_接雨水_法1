package dynamicProgramming;

import org.junit.Test;
import utils.LeetcodeUtils;

/**
 * 接雨水
 */
public class LeetCode_42 {

    @Test
    public void test1(){

        int[] height = {0,1,2,1,0,3,4,2,1,3,1};
        System.out.println( trap(height) );
    }

    public int trap(int[] height) {

        // 输入检查
        if(height == null) return 0;
        if(height.length == 0) return 0;

        int len = height.length;

        // 动态规划数组
        // dp[i][0]表示 i及i左侧的最大高度
        // dp[i][1]表示 i及i右侧的最大高度
        int[][] dp = new int[len][2];

        // 初始化
        dp[0][0] = height[0];
        dp[len-1][1] = height[len-1];

        // 从左到右，填dp[i][0]
        for(int i  = 1 ; i < len ; i++){
            dp[i][0] = Math.max( dp[i-1][0] , height[i] );
        }

        // 从右到左，填dp[i][1]
        for(int i = len-2 ; i >= 0 ; i--){
            dp[i][1] = Math.max( dp[i+1][1] , height[i] );
        }

        // 计算能接住的雨水总和
        // 依次计算每一个立柱
        int sum = 0;
        for(int i = 0 ; i < len ; i++){
            sum += Math.min( dp[i][0] , dp[i][1] ) - height[i];
        }

        //LeetcodeUtils.print2DArrayInForm(dp);

        return sum;
    }
}
