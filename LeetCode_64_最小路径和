import org.junit.Test;
import utils.LeetcodeUtils;


public class LeetCode_practice {


    @Test
    public void test1(){

        /*
        int[][] grid = {
                {1,3,1},
                {1,5,1},
                {4,2,1}
        };
        */
        int[][] grid = {
                {1,2,3},
                {4,5,6}
        };
        System.out.println( minPathSum(grid) );

    }

    public int minPathSum(int[][] grid) {

        if( grid == null ) return 0;
        if( grid.length == 0 ) return 0;

        // m行n列的递归表格
        int m = grid.length;
        int n = grid[0].length;

        // 创建递归表格
        int[][] dist = new int[m][n];

        // 用来记录最优路径


        // 初始化 dist[0][0]
        dist[0][0] = grid[0][0];

        // 初始化 dist 的第一行
        // 注意：总共有n列，所以初始化第一行的范围是：j < n
        for(int j = 1 ; j < n ; j++){
            dist[0][j] = dist[0][j-1] + grid[0][j];
        }

        // 初始化 dist 的第一列
        // 注意：总共有m行，所以初始化第一列的范围是：i < n
        for(int i = 1 ; i < m ; i++){
            dist[i][0] = dist[i-1][0] + grid[i][0];
        }

        // 递推填表/动态规划的过程
        // 按行填表
        // 注意：
        // 因为表格比 int[][] grid 多一行一列，所以i,j都是从1开始的
        for(int i = 1 ; i < m ; i++){
            for(int j = 1 ; j < n ; j++){
                dist[i][j] = Math.min(dist[i-1][j] , dist[i][j-1] ) + grid[i][j];
            }
        }

        // 用来记录最优路径
        // 对于mxn的网格，按照题目给定的规则，
        // 从起点一定经过 m+n-1 步走到终点
        /*
        String[] path = new String[m+n-1];
        int x = path.length-1; //x是path的索引，用以填充path
        path[x--] = (m-1) + "," + (n-1);
        path[0] = "0,0";

        // 倒推最优路径
        int i = m-1;
        int j = n-1;
        while( true ){

            if( i == 0 && j == 0 ){
                break;
            }

            if( i == 0 ){

                path[x--] = (i) + "," + (j-1);
                j--;

            }else if( j == 0 ){

                path[x--] = (i-1) + "," + (j);
                i--;

            }else if( dist[i-1][j] <= dist[i][j-1] ){

                path[x--] = (i-1) + "," + (j);
                i--;

            }else{

                path[x--] = (i) + "," + (j-1);
                j--;
            }

            // 输出路径
            for(int i1 = 0 ; i1 < path.length ; i1++){
                System.out.print( " (" + path[i1] + ") " );
                if(i1 != path.length-1){
                    System.out.print("——>");
                }
            }
            System.out.println();
        }
        */



        return dist[m-1][n-1];
    }

}
