package dynamicProgramming;

import org.junit.Test;

import java.util.Arrays;

/**
 * 300. 最长递增子序列
 * 给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。
 *
 * 子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。
 * 例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。
 *
 *
 * 示例 1：
 * 输入：nums = [10,9,2,5,3,7,101,18]
 * 输出：4
 * 解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。
 *
 * 示例 2：
 * 输入：nums = [0,1,0,3,2,3]
 * 输出：4
 *
 * 示例 3：
 * 输入：nums = [7,7,7,7,7,7,7]
 * 输出：1
 *
 *
 * 提示：
 * 1 <= nums.length <= 2500
 * -104 <= nums[i] <= 104
 *
 *
 * 进阶：
 * 你可以设计时间复杂度为 O(n2) 的解决方案吗？
 * 你能将算法的时间复杂度降低到 O(n log(n)) 吗?
 */

public class Leetcode_300 {

    @Test
    public void test(){
        int[] a = {10,9,2,5,3,7,101,18};
        System.out.println( lengthOfLIS(a) );

        int[] a2 = {0,1,0,3,2,3};
        System.out.println( lengthOfLIS(a2) );

        int[] a3 = {1,3,6,7,9,4,10,5,6};
        System.out.println( lengthOfLIS(a3) );
    }

    public int lengthOfLIS(int[] nums) {

        int len = nums.length;
        int maxLen = 1;

        // 动态规划数组
        int[] dp = new int[len];

        // 初始化数组
        //dp[0] = 1; 这个不对
        Arrays.fill(dp,1);

        // dp[i] 代表 [0,i]最长递增子序列长度
        for(int i = 0 ; i < len ; i++){
            // 每次求dp[i]的时候，需要遍历 i 前面所有元素
            // 所以空间复杂度为O(n2)
            for(int j = 0 ; j < i ; j++){
                /*
                if( nums[j] < nums[i] && dp[j]+1 > dp[i] ){ //题目要求：[7,7,7] 不算递增
                    dp[i] = dp[j] + 1;
                    if(dp[i] > maxLen) maxLen = dp[i];
                }
                */
                if( nums[j] < nums[i] ){
                    dp[i] = Math.max( dp[i] , dp[j]+1 );
                    if(dp[i] > maxLen) maxLen = dp[i];
                }
            }
        }

        //test
        //LeetcodeUtils.printArray(nums);
        //LeetcodeUtils.printArray(dp);

        //return dp[len-1]; 不对
        return maxLen;
    }

}
