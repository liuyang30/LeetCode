import org.junit.Test;
import utils.LeetcodeUtils;

/**
 * 最长公共子序列
 *      动态规划
 */
public class Leetcode_1143 {

    @Test
    public void test01(){
        String s1 = "bdcaba";
        String s2 = "abcbda";

        //String s1 = "abcde";
        //String s2 = "ace";

        System.out.println(longestCommonSubsequence(s1, s2));
    }

    public int longestCommonSubsequence(String text1, String text2) {

        //建立数组，用来二维动态规划
        int len1 = text1.length();
        int len2 = text2.length();

        // m行n列
        int m = len2 + 1;
        int n = len1 + 1;

        int[][] dp = new int[m][n];

        // 初始化
        // int类型数组，初始值默认为0，所以不需要再有额外的操作了
        
        // 进行动态规划
        // 注意：i，j代表表格坐标，与字符串遍历位置多1
        // 按行遍历
        for(int i = 1 ; i < m ; i++){

            for(int j = 1 ; j < n ; j++){

                if( text2.charAt(i-1) == text1.charAt(j-1) ) {
                    dp[i][j] = dp[i-1][j-1] + 1;
                }else{
                    dp[i][j] = Math.max( dp[i-1][j] , dp[i][j-1] );
                }
            }
        }

        LeetcodeUtils.print2DArrayInForm(dp);

        return dp[m-1][n-1];
    }

}
